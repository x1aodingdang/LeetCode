/* 

36. 有效的数独
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。

*/

var isValidSudoku = function (board) {
  const temp = [];
  const temp3X3 = {};

  for (let x = 0; x < 9; x++) {
    const row = board[x];

    // row loop
    const rowT = [];
    for (let y = 0; y < 9; y++) {
      const d = row[y];
      if (d !== ".") {
        // 排除行相同的元素
        if (rowT.includes(d)) {
          return false;
        }
        rowT.push(d);
      }

      const rowCol = board[y][x];
      if (rowCol !== ".") {
        if (temp[x] !== undefined) {
          // 排除列相同的元素
          if (temp[x].includes(rowCol)) {
            return false;
          }
          temp[x].push(rowCol);
        } else {
          temp[x] = [rowCol];
        }
      }

      // 以粗线划分  排除相同的
      const z = board[x][y];
      if (z !== ".") {
        const keyFor3X3 = `${Math.floor(x / 3)}-${Math.floor(y / 3)}`;
        if (temp3X3[keyFor3X3] === undefined) {
          temp3X3[keyFor3X3] = [z];
        } else {
          if (temp3X3[keyFor3X3].includes(z)) {
            return false;
          }
          temp3X3[keyFor3X3].push(z);
        }
      }
    }
  }
  return true;
};

/* console.log(
  isValidSudoku([
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"],
  ])
); */
/* console.log(
  isValidSudoku([
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"],
  ])
); */
console.log(
  isValidSudoku([
    [".", ".", "4", ".", ".", ".", "6", "3", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ["5", ".", ".", ".", ".", ".", ".", "9", "."],
    [".", ".", ".", "5", "6", ".", ".", ".", "."],
    ["4", ".", "3", ".", ".", ".", ".", ".", "1"],
    [".", ".", ".", "7", ".", ".", ".", ".", "."],
    [".", ".", ".", "5", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
  ])
);

/* 



1,1  1,2  1,3 | 1,4  1,5  1,6 | 1,7  1,8  1,9
2,1  2,2  2,3 | 2,4  2,5  2,6 | 2,7  2,8  2,9
3,1  3,2  3,3 | 3,4  3,5  3,6 | 3,7  3,8  3,9

4,1  4,2  4,3 | 4,4  4,5  4,6 | 4,7  4,8  4,9
5,1  5,2  5,3 | 5,4  5,5  5,6 | 5,7  5,8  5,9
6,1  6,2  6,3 | 6,4  6,5  6,6 | 6,7  6,8  6,9

7,1  7,2  7,3 | 7,4  7,5  7,6 | 7,7  7,8  7,9
8,1  8,2  8,3 | 8,4  8,5  8,6 | 8,7  8,8  8,9
9,1  9,2  9,3 | 9,4  9,5  9,6 | 9,7  9,8  9,9


*/
